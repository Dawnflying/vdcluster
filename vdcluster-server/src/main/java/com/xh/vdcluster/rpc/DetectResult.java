/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xh.vdcluster.rpc;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;
import org.apache.thrift.scheme.SchemeFactory;

import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-07-18")
public class DetectResult implements org.apache.thrift.TBase<DetectResult, DetectResult._Fields>, java.io.Serializable, Cloneable, Comparable<DetectResult> {
  private static final TStruct STRUCT_DESC = new TStruct("DetectResult");

  private static final TField SERVICE_ID_FIELD_DESC = new TField("serviceId", TType.STRING, (short)1);
  private static final TField HIT_TIME_FIELD_DESC = new TField("hitTime", TType.STRING, (short)2);
  private static final TField HIT_TYPE_FIELD_DESC = new TField("hitType", TType.I32, (short)3);
  private static final TField CONFIDENCE_THRESHOLD_FIELD_DESC = new TField("confidenceThreshold", TType.DOUBLE, (short)4);
  private static final TField RECT_X_FIELD_DESC = new TField("rectX", TType.DOUBLE, (short)5);
  private static final TField RECT_Y_FIELD_DESC = new TField("rectY", TType.DOUBLE, (short)6);
  private static final TField HEIGHT_FIELD_DESC = new TField("height", TType.DOUBLE, (short)7);
  private static final TField WIDTH_FIELD_DESC = new TField("width", TType.DOUBLE, (short)8);
  private static final TField PREVIEW_PICTURES_FIELD_DESC = new TField("previewPictures", TType.LIST, (short)9);
  private static final TField VIDEO_URL_FIELD_DESC = new TField("videoURL", TType.STRING, (short)10);

  private static final SchemeFactory STANDARD_SCHEME_FACTORY = new DetectResultStandardSchemeFactory();
  private static final SchemeFactory TUPLE_SCHEME_FACTORY = new DetectResultTupleSchemeFactory();

  public String serviceId; // required
  public String hitTime; // required
  public int hitType; // required
  public double confidenceThreshold; // required
  public double rectX; // required
  public double rectY; // required
  public double height; // required
  public double width; // required
  public List<String> previewPictures; // required
  public String videoURL; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SERVICE_ID((short)1, "serviceId"),
    HIT_TIME((short)2, "hitTime"),
    HIT_TYPE((short)3, "hitType"),
    CONFIDENCE_THRESHOLD((short)4, "confidenceThreshold"),
    RECT_X((short)5, "rectX"),
    RECT_Y((short)6, "rectY"),
    HEIGHT((short)7, "height"),
    WIDTH((short)8, "width"),
    PREVIEW_PICTURES((short)9, "previewPictures"),
    VIDEO_URL((short)10, "videoURL");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVICE_ID
          return SERVICE_ID;
        case 2: // HIT_TIME
          return HIT_TIME;
        case 3: // HIT_TYPE
          return HIT_TYPE;
        case 4: // CONFIDENCE_THRESHOLD
          return CONFIDENCE_THRESHOLD;
        case 5: // RECT_X
          return RECT_X;
        case 6: // RECT_Y
          return RECT_Y;
        case 7: // HEIGHT
          return HEIGHT;
        case 8: // WIDTH
          return WIDTH;
        case 9: // PREVIEW_PICTURES
          return PREVIEW_PICTURES;
        case 10: // VIDEO_URL
          return VIDEO_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HITTYPE_ISSET_ID = 0;
  private static final int __CONFIDENCETHRESHOLD_ISSET_ID = 1;
  private static final int __RECTX_ISSET_ID = 2;
  private static final int __RECTY_ISSET_ID = 3;
  private static final int __HEIGHT_ISSET_ID = 4;
  private static final int __WIDTH_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVICE_ID, new FieldMetaData("serviceId", TFieldRequirementType.REQUIRED,
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.HIT_TIME, new FieldMetaData("hitTime", TFieldRequirementType.REQUIRED,
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.HIT_TYPE, new FieldMetaData("hitType", TFieldRequirementType.REQUIRED,
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CONFIDENCE_THRESHOLD, new FieldMetaData("confidenceThreshold", TFieldRequirementType.REQUIRED,
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.RECT_X, new FieldMetaData("rectX", TFieldRequirementType.REQUIRED,
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.RECT_Y, new FieldMetaData("rectY", TFieldRequirementType.REQUIRED,
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.HEIGHT, new FieldMetaData("height", TFieldRequirementType.REQUIRED,
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.WIDTH, new FieldMetaData("width", TFieldRequirementType.REQUIRED,
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.PREVIEW_PICTURES, new FieldMetaData("previewPictures", TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.ListMetaData(TType.LIST,
            new FieldValueMetaData(TType.STRING))));
    tmpMap.put(_Fields.VIDEO_URL, new FieldMetaData("videoURL", TFieldRequirementType.REQUIRED,
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(DetectResult.class, metaDataMap);
  }

  public DetectResult() {
  }

  public DetectResult(
    String serviceId,
    String hitTime,
    int hitType,
    double confidenceThreshold,
    double rectX,
    double rectY,
    double height,
    double width,
    List<String> previewPictures,
    String videoURL)
  {
    this();
    this.serviceId = serviceId;
    this.hitTime = hitTime;
    this.hitType = hitType;
    setHitTypeIsSet(true);
    this.confidenceThreshold = confidenceThreshold;
    setConfidenceThresholdIsSet(true);
    this.rectX = rectX;
    setRectXIsSet(true);
    this.rectY = rectY;
    setRectYIsSet(true);
    this.height = height;
    setHeightIsSet(true);
    this.width = width;
    setWidthIsSet(true);
    this.previewPictures = previewPictures;
    this.videoURL = videoURL;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DetectResult(DetectResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetServiceId()) {
      this.serviceId = other.serviceId;
    }
    if (other.isSetHitTime()) {
      this.hitTime = other.hitTime;
    }
    this.hitType = other.hitType;
    this.confidenceThreshold = other.confidenceThreshold;
    this.rectX = other.rectX;
    this.rectY = other.rectY;
    this.height = other.height;
    this.width = other.width;
    if (other.isSetPreviewPictures()) {
      List<String> __this__previewPictures = new ArrayList<String>(other.previewPictures);
      this.previewPictures = __this__previewPictures;
    }
    if (other.isSetVideoURL()) {
      this.videoURL = other.videoURL;
    }
  }

  public DetectResult deepCopy() {
    return new DetectResult(this);
  }

  @Override
  public void clear() {
    this.serviceId = null;
    this.hitTime = null;
    setHitTypeIsSet(false);
    this.hitType = 0;
    setConfidenceThresholdIsSet(false);
    this.confidenceThreshold = 0.0;
    setRectXIsSet(false);
    this.rectX = 0.0;
    setRectYIsSet(false);
    this.rectY = 0.0;
    setHeightIsSet(false);
    this.height = 0.0;
    setWidthIsSet(false);
    this.width = 0.0;
    this.previewPictures = null;
    this.videoURL = null;
  }

  public String getServiceId() {
    return this.serviceId;
  }

  public DetectResult setServiceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  public void unsetServiceId() {
    this.serviceId = null;
  }

  /** Returns true if field serviceId is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceId() {
    return this.serviceId != null;
  }

  public void setServiceIdIsSet(boolean value) {
    if (!value) {
      this.serviceId = null;
    }
  }

  public String getHitTime() {
    return this.hitTime;
  }

  public DetectResult setHitTime(String hitTime) {
    this.hitTime = hitTime;
    return this;
  }

  public void unsetHitTime() {
    this.hitTime = null;
  }

  /** Returns true if field hitTime is set (has been assigned a value) and false otherwise */
  public boolean isSetHitTime() {
    return this.hitTime != null;
  }

  public void setHitTimeIsSet(boolean value) {
    if (!value) {
      this.hitTime = null;
    }
  }

  public int getHitType() {
    return this.hitType;
  }

  public DetectResult setHitType(int hitType) {
    this.hitType = hitType;
    setHitTypeIsSet(true);
    return this;
  }

  public void unsetHitType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HITTYPE_ISSET_ID);
  }

  /** Returns true if field hitType is set (has been assigned a value) and false otherwise */
  public boolean isSetHitType() {
    return EncodingUtils.testBit(__isset_bitfield, __HITTYPE_ISSET_ID);
  }

  public void setHitTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HITTYPE_ISSET_ID, value);
  }

  public double getConfidenceThreshold() {
    return this.confidenceThreshold;
  }

  public DetectResult setConfidenceThreshold(double confidenceThreshold) {
    this.confidenceThreshold = confidenceThreshold;
    setConfidenceThresholdIsSet(true);
    return this;
  }

  public void unsetConfidenceThreshold() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIDENCETHRESHOLD_ISSET_ID);
  }

  /** Returns true if field confidenceThreshold is set (has been assigned a value) and false otherwise */
  public boolean isSetConfidenceThreshold() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIDENCETHRESHOLD_ISSET_ID);
  }

  public void setConfidenceThresholdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIDENCETHRESHOLD_ISSET_ID, value);
  }

  public double getRectX() {
    return this.rectX;
  }

  public DetectResult setRectX(double rectX) {
    this.rectX = rectX;
    setRectXIsSet(true);
    return this;
  }

  public void unsetRectX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECTX_ISSET_ID);
  }

  /** Returns true if field rectX is set (has been assigned a value) and false otherwise */
  public boolean isSetRectX() {
    return EncodingUtils.testBit(__isset_bitfield, __RECTX_ISSET_ID);
  }

  public void setRectXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECTX_ISSET_ID, value);
  }

  public double getRectY() {
    return this.rectY;
  }

  public DetectResult setRectY(double rectY) {
    this.rectY = rectY;
    setRectYIsSet(true);
    return this;
  }

  public void unsetRectY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECTY_ISSET_ID);
  }

  /** Returns true if field rectY is set (has been assigned a value) and false otherwise */
  public boolean isSetRectY() {
    return EncodingUtils.testBit(__isset_bitfield, __RECTY_ISSET_ID);
  }

  public void setRectYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECTY_ISSET_ID, value);
  }

  public double getHeight() {
    return this.height;
  }

  public DetectResult setHeight(double height) {
    this.height = height;
    setHeightIsSet(true);
    return this;
  }

  public void unsetHeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return EncodingUtils.testBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEIGHT_ISSET_ID, value);
  }

  public double getWidth() {
    return this.width;
  }

  public DetectResult setWidth(double width) {
    this.width = width;
    setWidthIsSet(true);
    return this;
  }

  public void unsetWidth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been assigned a value) and false otherwise */
  public boolean isSetWidth() {
    return EncodingUtils.testBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WIDTH_ISSET_ID, value);
  }

  public int getPreviewPicturesSize() {
    return (this.previewPictures == null) ? 0 : this.previewPictures.size();
  }

  public Iterator<String> getPreviewPicturesIterator() {
    return (this.previewPictures == null) ? null : this.previewPictures.iterator();
  }

  public void addToPreviewPictures(String elem) {
    if (this.previewPictures == null) {
      this.previewPictures = new ArrayList<String>();
    }
    this.previewPictures.add(elem);
  }

  public List<String> getPreviewPictures() {
    return this.previewPictures;
  }

  public DetectResult setPreviewPictures(List<String> previewPictures) {
    this.previewPictures = previewPictures;
    return this;
  }

  public void unsetPreviewPictures() {
    this.previewPictures = null;
  }

  /** Returns true if field previewPictures is set (has been assigned a value) and false otherwise */
  public boolean isSetPreviewPictures() {
    return this.previewPictures != null;
  }

  public void setPreviewPicturesIsSet(boolean value) {
    if (!value) {
      this.previewPictures = null;
    }
  }

  public String getVideoURL() {
    return this.videoURL;
  }

  public DetectResult setVideoURL(String videoURL) {
    this.videoURL = videoURL;
    return this;
  }

  public void unsetVideoURL() {
    this.videoURL = null;
  }

  /** Returns true if field videoURL is set (has been assigned a value) and false otherwise */
  public boolean isSetVideoURL() {
    return this.videoURL != null;
  }

  public void setVideoURLIsSet(boolean value) {
    if (!value) {
      this.videoURL = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVICE_ID:
      if (value == null) {
        unsetServiceId();
      } else {
        setServiceId((String)value);
      }
      break;

    case HIT_TIME:
      if (value == null) {
        unsetHitTime();
      } else {
        setHitTime((String)value);
      }
      break;

    case HIT_TYPE:
      if (value == null) {
        unsetHitType();
      } else {
        setHitType((Integer)value);
      }
      break;

    case CONFIDENCE_THRESHOLD:
      if (value == null) {
        unsetConfidenceThreshold();
      } else {
        setConfidenceThreshold((Double)value);
      }
      break;

    case RECT_X:
      if (value == null) {
        unsetRectX();
      } else {
        setRectX((Double)value);
      }
      break;

    case RECT_Y:
      if (value == null) {
        unsetRectY();
      } else {
        setRectY((Double)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Double)value);
      }
      break;

    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((Double)value);
      }
      break;

    case PREVIEW_PICTURES:
      if (value == null) {
        unsetPreviewPictures();
      } else {
        setPreviewPictures((List<String>)value);
      }
      break;

    case VIDEO_URL:
      if (value == null) {
        unsetVideoURL();
      } else {
        setVideoURL((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVICE_ID:
      return getServiceId();

    case HIT_TIME:
      return getHitTime();

    case HIT_TYPE:
      return getHitType();

    case CONFIDENCE_THRESHOLD:
      return getConfidenceThreshold();

    case RECT_X:
      return getRectX();

    case RECT_Y:
      return getRectY();

    case HEIGHT:
      return getHeight();

    case WIDTH:
      return getWidth();

    case PREVIEW_PICTURES:
      return getPreviewPictures();

    case VIDEO_URL:
      return getVideoURL();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVICE_ID:
      return isSetServiceId();
    case HIT_TIME:
      return isSetHitTime();
    case HIT_TYPE:
      return isSetHitType();
    case CONFIDENCE_THRESHOLD:
      return isSetConfidenceThreshold();
    case RECT_X:
      return isSetRectX();
    case RECT_Y:
      return isSetRectY();
    case HEIGHT:
      return isSetHeight();
    case WIDTH:
      return isSetWidth();
    case PREVIEW_PICTURES:
      return isSetPreviewPictures();
    case VIDEO_URL:
      return isSetVideoURL();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DetectResult)
      return this.equals((DetectResult)that);
    return false;
  }

  public boolean equals(DetectResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_serviceId = true && this.isSetServiceId();
    boolean that_present_serviceId = true && that.isSetServiceId();
    if (this_present_serviceId || that_present_serviceId) {
      if (!(this_present_serviceId && that_present_serviceId))
        return false;
      if (!this.serviceId.equals(that.serviceId))
        return false;
    }

    boolean this_present_hitTime = true && this.isSetHitTime();
    boolean that_present_hitTime = true && that.isSetHitTime();
    if (this_present_hitTime || that_present_hitTime) {
      if (!(this_present_hitTime && that_present_hitTime))
        return false;
      if (!this.hitTime.equals(that.hitTime))
        return false;
    }

    boolean this_present_hitType = true;
    boolean that_present_hitType = true;
    if (this_present_hitType || that_present_hitType) {
      if (!(this_present_hitType && that_present_hitType))
        return false;
      if (this.hitType != that.hitType)
        return false;
    }

    boolean this_present_confidenceThreshold = true;
    boolean that_present_confidenceThreshold = true;
    if (this_present_confidenceThreshold || that_present_confidenceThreshold) {
      if (!(this_present_confidenceThreshold && that_present_confidenceThreshold))
        return false;
      if (this.confidenceThreshold != that.confidenceThreshold)
        return false;
    }

    boolean this_present_rectX = true;
    boolean that_present_rectX = true;
    if (this_present_rectX || that_present_rectX) {
      if (!(this_present_rectX && that_present_rectX))
        return false;
      if (this.rectX != that.rectX)
        return false;
    }

    boolean this_present_rectY = true;
    boolean that_present_rectY = true;
    if (this_present_rectY || that_present_rectY) {
      if (!(this_present_rectY && that_present_rectY))
        return false;
      if (this.rectY != that.rectY)
        return false;
    }

    boolean this_present_height = true;
    boolean that_present_height = true;
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_width = true;
    boolean that_present_width = true;
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    boolean this_present_previewPictures = true && this.isSetPreviewPictures();
    boolean that_present_previewPictures = true && that.isSetPreviewPictures();
    if (this_present_previewPictures || that_present_previewPictures) {
      if (!(this_present_previewPictures && that_present_previewPictures))
        return false;
      if (!this.previewPictures.equals(that.previewPictures))
        return false;
    }

    boolean this_present_videoURL = true && this.isSetVideoURL();
    boolean that_present_videoURL = true && that.isSetVideoURL();
    if (this_present_videoURL || that_present_videoURL) {
      if (!(this_present_videoURL && that_present_videoURL))
        return false;
      if (!this.videoURL.equals(that.videoURL))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetServiceId()) ? 131071 : 524287);
    if (isSetServiceId())
      hashCode = hashCode * 8191 + serviceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetHitTime()) ? 131071 : 524287);
    if (isSetHitTime())
      hashCode = hashCode * 8191 + hitTime.hashCode();

    hashCode = hashCode * 8191 + hitType;

    hashCode = hashCode * 8191 + TBaseHelper.hashCode(confidenceThreshold);

    hashCode = hashCode * 8191 + TBaseHelper.hashCode(rectX);

    hashCode = hashCode * 8191 + TBaseHelper.hashCode(rectY);

    hashCode = hashCode * 8191 + TBaseHelper.hashCode(height);

    hashCode = hashCode * 8191 + TBaseHelper.hashCode(width);

    hashCode = hashCode * 8191 + ((isSetPreviewPictures()) ? 131071 : 524287);
    if (isSetPreviewPictures())
      hashCode = hashCode * 8191 + previewPictures.hashCode();

    hashCode = hashCode * 8191 + ((isSetVideoURL()) ? 131071 : 524287);
    if (isSetVideoURL())
      hashCode = hashCode * 8191 + videoURL.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DetectResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetServiceId()).compareTo(other.isSetServiceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceId()) {
      lastComparison = TBaseHelper.compareTo(this.serviceId, other.serviceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHitTime()).compareTo(other.isSetHitTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHitTime()) {
      lastComparison = TBaseHelper.compareTo(this.hitTime, other.hitTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHitType()).compareTo(other.isSetHitType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHitType()) {
      lastComparison = TBaseHelper.compareTo(this.hitType, other.hitType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfidenceThreshold()).compareTo(other.isSetConfidenceThreshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfidenceThreshold()) {
      lastComparison = TBaseHelper.compareTo(this.confidenceThreshold, other.confidenceThreshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRectX()).compareTo(other.isSetRectX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRectX()) {
      lastComparison = TBaseHelper.compareTo(this.rectX, other.rectX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRectY()).compareTo(other.isSetRectY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRectY()) {
      lastComparison = TBaseHelper.compareTo(this.rectY, other.rectY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(other.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = TBaseHelper.compareTo(this.height, other.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWidth()).compareTo(other.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {
      lastComparison = TBaseHelper.compareTo(this.width, other.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreviewPictures()).compareTo(other.isSetPreviewPictures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreviewPictures()) {
      lastComparison = TBaseHelper.compareTo(this.previewPictures, other.previewPictures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVideoURL()).compareTo(other.isSetVideoURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVideoURL()) {
      lastComparison = TBaseHelper.compareTo(this.videoURL, other.videoURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DetectResult(");
    boolean first = true;

    sb.append("serviceId:");
    if (this.serviceId == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hitTime:");
    if (this.hitTime == null) {
      sb.append("null");
    } else {
      sb.append(this.hitTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hitType:");
    sb.append(this.hitType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confidenceThreshold:");
    sb.append(this.confidenceThreshold);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rectX:");
    sb.append(this.rectX);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rectY:");
    sb.append(this.rectY);
    first = false;
    if (!first) sb.append(", ");
    sb.append("height:");
    sb.append(this.height);
    first = false;
    if (!first) sb.append(", ");
    sb.append("width:");
    sb.append(this.width);
    first = false;
    if (!first) sb.append(", ");
    sb.append("previewPictures:");
    if (this.previewPictures == null) {
      sb.append("null");
    } else {
      sb.append(this.previewPictures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("videoURL:");
    if (this.videoURL == null) {
      sb.append("null");
    } else {
      sb.append(this.videoURL);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (serviceId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceId' was not present! Struct: " + toString());
    }
    if (hitTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hitTime' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'hitType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'confidenceThreshold' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'rectX' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'rectY' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'height' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'width' because it's a primitive and you chose the non-beans generator.
    if (previewPictures == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'previewPictures' was not present! Struct: " + toString());
    }
    if (videoURL == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'videoURL' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DetectResultStandardSchemeFactory implements SchemeFactory {
    public DetectResultStandardScheme getScheme() {
      return new DetectResultStandardScheme();
    }
  }

  private static class DetectResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<DetectResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DetectResult struct) throws org.apache.thrift.TException {
      TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVICE_ID
            if (schemeField.type == TType.STRING) {
              struct.serviceId = iprot.readString();
              struct.setServiceIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HIT_TIME
            if (schemeField.type == TType.STRING) {
              struct.hitTime = iprot.readString();
              struct.setHitTimeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HIT_TYPE
            if (schemeField.type == TType.I32) {
              struct.hitType = iprot.readI32();
              struct.setHitTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONFIDENCE_THRESHOLD
            if (schemeField.type == TType.DOUBLE) {
              struct.confidenceThreshold = iprot.readDouble();
              struct.setConfidenceThresholdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECT_X
            if (schemeField.type == TType.DOUBLE) {
              struct.rectX = iprot.readDouble();
              struct.setRectXIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECT_Y
            if (schemeField.type == TType.DOUBLE) {
              struct.rectY = iprot.readDouble();
              struct.setRectYIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HEIGHT
            if (schemeField.type == TType.DOUBLE) {
              struct.height = iprot.readDouble();
              struct.setHeightIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WIDTH
            if (schemeField.type == TType.DOUBLE) {
              struct.width = iprot.readDouble();
              struct.setWidthIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PREVIEW_PICTURES
            if (schemeField.type == TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.previewPictures = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.previewPictures.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setPreviewPicturesIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VIDEO_URL
            if (schemeField.type == TType.STRING) {
              struct.videoURL = iprot.readString();
              struct.setVideoURLIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetHitType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'hitType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetConfidenceThreshold()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'confidenceThreshold' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRectX()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rectX' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRectY()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rectY' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHeight()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'height' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetWidth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'width' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DetectResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serviceId != null) {
        oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
        oprot.writeString(struct.serviceId);
        oprot.writeFieldEnd();
      }
      if (struct.hitTime != null) {
        oprot.writeFieldBegin(HIT_TIME_FIELD_DESC);
        oprot.writeString(struct.hitTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HIT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.hitType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFIDENCE_THRESHOLD_FIELD_DESC);
      oprot.writeDouble(struct.confidenceThreshold);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECT_X_FIELD_DESC);
      oprot.writeDouble(struct.rectX);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECT_Y_FIELD_DESC);
      oprot.writeDouble(struct.rectY);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
      oprot.writeDouble(struct.height);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIDTH_FIELD_DESC);
      oprot.writeDouble(struct.width);
      oprot.writeFieldEnd();
      if (struct.previewPictures != null) {
        oprot.writeFieldBegin(PREVIEW_PICTURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(TType.STRING, struct.previewPictures.size()));
          for (String _iter3 : struct.previewPictures)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.videoURL != null) {
        oprot.writeFieldBegin(VIDEO_URL_FIELD_DESC);
        oprot.writeString(struct.videoURL);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DetectResultTupleSchemeFactory implements SchemeFactory {
    public DetectResultTupleScheme getScheme() {
      return new DetectResultTupleScheme();
    }
  }

  private static class DetectResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<DetectResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DetectResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.serviceId);
      oprot.writeString(struct.hitTime);
      oprot.writeI32(struct.hitType);
      oprot.writeDouble(struct.confidenceThreshold);
      oprot.writeDouble(struct.rectX);
      oprot.writeDouble(struct.rectY);
      oprot.writeDouble(struct.height);
      oprot.writeDouble(struct.width);
      {
        oprot.writeI32(struct.previewPictures.size());
        for (String _iter4 : struct.previewPictures)
        {
          oprot.writeString(_iter4);
        }
      }
      oprot.writeString(struct.videoURL);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DetectResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.serviceId = iprot.readString();
      struct.setServiceIdIsSet(true);
      struct.hitTime = iprot.readString();
      struct.setHitTimeIsSet(true);
      struct.hitType = iprot.readI32();
      struct.setHitTypeIsSet(true);
      struct.confidenceThreshold = iprot.readDouble();
      struct.setConfidenceThresholdIsSet(true);
      struct.rectX = iprot.readDouble();
      struct.setRectXIsSet(true);
      struct.rectY = iprot.readDouble();
      struct.setRectYIsSet(true);
      struct.height = iprot.readDouble();
      struct.setHeightIsSet(true);
      struct.width = iprot.readDouble();
      struct.setWidthIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(TType.STRING, iprot.readI32());
        struct.previewPictures = new ArrayList<String>(_list5.size);
        String _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = iprot.readString();
          struct.previewPictures.add(_elem6);
        }
      }
      struct.setPreviewPicturesIsSet(true);
      struct.videoURL = iprot.readString();
      struct.setVideoURLIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

